#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);
//rub3n: manage sockets

const io = require('socket.io').listen(server);

io.on('connection', socket => {
  console.log("conectado")

  socket.on('autopath', msg => {
    io.emit('autopath', msg)
  })



  socket.on('keypress', (msg) => {
    console.log(msg)
    io.emit("keypress", msg)
  });

  socket.on("camServo", val =>
    io.emit("camServo", val))


  socket.on("metal detected", msg => {
    io.emit("metal detected", msg)
  })

  socket.on("speed update", msg => {
    io.emit("speed update", msg)
  })

  socket.on("cam", data => {
    io.binary(true).emit("cam", data)
  })

  socket.on("board ready", msg => io.emit("board ready", msg))
})




server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => { console.log("Escucho") })


